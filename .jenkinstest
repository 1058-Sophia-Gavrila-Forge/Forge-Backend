pipeline {
  agent any
  
  environment {
      GIT_COMMIT_EMAIL = """${sh (
          script: 'git --no-pager show -s --format=\'%ae\'',
          returnStdout: true
      ).trim()}"""
      GIT_COMMIT_MSG = """${sh (
          script: 'git log -1 --pretty=%B',
          returnStdout: true
      ).trim()}"""
  }
  
  stages {
    stage('Setup') {
      steps {
        sh 'pwd'
        sh 'ls -al'
        sh 'chmod +x gradlew'
        script {
          env.GIT_COMMIT_FED = """${sh (
                    script: 
                            '''if [[ $GIT_COMMIT_MSG == *"MAKE FRONTEND-DEV"* ]]; then
                                  echo 'true'
                               else
                                  echo 'false'
                               fi
                            ''',
                    returnStdout: true
                )}"""
            env.PID_TO_KILL = sh (
                    script: "lsof -i tcp:8081 | awk \'NR==2{print \$2}\'",
                    returnStdout: true
                ).trim()
        }//script
      }//steps
    }//stage('Setup')
    
    stage('list credentials ids') {
      steps {
        script {
          sh 'cat $JENKINS_HOME/credentials.xml | grep "<id>"'
        }
      }
    }
    
    stage("Env Variables") {
        steps {
            echo "GIT_COMMIT_FED is ${GIT_COMMIT_FED}"
            echo "GIT_BRANCH is ${GIT_BRANCH}"
            sh 'printenv'
        }
    }
    
    stage('Test') {
      steps {
        withGradle {
          script{
            try {
              sh './gradlew build -x test --no-daemon'
              sh './gradlew test jacocoTestReport --no-daemon'
            } finally {
              echo 'junit call can go here'
            }
          } //script
        } //withGradle
      } //steps
    } //stage('Test')
    
    stage('Publish Test Coverage Report') {
      steps {
        step([$class: 'JacocoPublisher',
              execPattern: '**/build/jacoco/*.exec',
              classPattern: '**/build/classes',
              sourcePattern: 'src/main/java',
              exclusionPattern: 'src/test*',
              buildOverBuild: true,
              changeBuildStatus: true,
              minimumInstructionCoverage: '80',
              maximumInstructionCoverage: '90'
              ])
      } //steps
    } //stage(...)
    
    stage('Record Coverage') {
        when { branch 'main' }
        steps {
            script {
                currentBuild.result = 'SUCCESS'
             }
            step([$class: 'MasterCoverageAction', scmVars: [GIT_URL: env.GIT_URL]])
        }
    }
    stage('PR Coverage to Github') {
        when { 
            not {
                branch 'frontend-dev'
            }; 
            expression { return env.CHANGE_ID != null } 
        }
        steps {
            script {
                currentBuild.result = 'SUCCESS'
             }

            step([$class: 'CompareCoverageAction', publishResultAs: 'statusCheck', scmVars: [GIT_URL: env.GIT_URL]])

        }
    }
    
    stage('Make Frontend-Dev') {
        when {
            allOf {
                branch 'main'
                expression { return GIT_COMMIT_FED.toBoolean() }
            }
        }
        steps {
            sh ([script:'''#!/bin/bash
                           if [[ -z "$PID_TO_KILL"]]; then
                              echo 'PID_TO_KILL is empty'
                           else
                              echo 'kill cmd will go here but not yet'  //kill -9 $PID_TO_KILL
                           fi'''])
            withCredentials([usernamePassword(credentialsId: 'gh-pat', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh ([script:'''#!/bin/bash
                               echo $USERNAME
                               echo $GIT_URL
                               git remote set-url origin https://$USERNAME:$PASSWORD@github.com/javatures/Forge-Backend.git
                               git push origin --delete frontend-dev
                               git branch -D frontend-dev
                               git branch frontend-dev main
                               git push origin frontend-dev'''])
            }
        }
    }
    
    stage('Deploy Frontend-Dev') {
        when { 
              branch 'frontend-dev'
        }
        steps {
            script {
                sh './gradlew clean bootRun'
            }
        }
    }
    
  } //stages
  post {
    always {
      emailext body: 'A Test EMail',
               to: env.EMAIL_LIST,
               subject: 'Test'
    }
  }
}
