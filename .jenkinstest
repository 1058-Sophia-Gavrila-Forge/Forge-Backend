pipeline {
  agent any
  
  triggers {
    githubPullRequest {
      useGitHubHooks()
      extensions {
        commitStatus {
                    context('deploy to staging site')
                    triggeredStatus('starting deployment to staging site...')
                    startedStatus('deploying to staging site...')
                    addTestResults(true)
                    statusUrl('http://mystatussite.com/prs')
                    completedStatus('SUCCESS', 'All is well')
                    completedStatus('FAILURE', 'Something went wrong. Investigate!')
                    completedStatus('PENDING', 'still in progress...')
                    completedStatus('ERROR', 'Something went really wrong. Investigate!')
                }
                buildStatus {
                    completedStatus('SUCCESS', 'There were no errors, go have a cup of coffee...')
                    completedStatus('FAILURE', 'There were errors, for info, please see...')
                    completedStatus('ERROR', 'There was an error in the infrastructure, please contact...')
                }//commitStatus
      }//extensions
    }//githubPullRequest
  }//triggers
  
  stages {
    stage('Setup') {
      steps {
        sh 'pwd'
        sh 'ls -al'
        sh 'chmod +x gradlew'
      }
    }
    
    stage('Test') {
      steps {
        withGradle {
          script{
            try {
              sh './gradlew build -x test --no-daemon'
              sh './gradlew test jacocoTestReport --no-daemon'
            } finally {
              echo 'junit call can go here'
            }
          } //script
        } //withGradle
      } //steps
    } //stage('Test')
    
    stage('Publish Test Coverage Report') {
      steps {
        step([$class: 'JacocoPublisher',
              execPattern: '**/build/jacoco/*.exec',
              classPattern: '**/build/classes',
              sourcePattern: 'src/main/java',
              exclusionPattern: 'src/test*'
              ])
      } //steps
    } //stage(...)
    
    stage('Record Coverage') {
        when { branch 'main' }
        steps {
            script {
                currentBuild.result = 'SUCCESS'
             }
            step([$class: 'MasterCoverageAction', jacocoCounterType:'INSTRUCTION', publishResultAs: 'comment', scmVars: [GIT_URL: env.GIT_URL]])
        }
    }
    stage('PR Coverage to Github') {
        when { allOf {not { branch 'master' }; expression { return env.CHANGE_ID != null }} }
        steps {
            script {
                currentBuild.result = 'SUCCESS'
             }
            step([$class: 'CompareCoverageAction', jacocoCounterType:'INSTRUCTION', publishResultAs: 'comment', scmVars: [GIT_URL: env.GIT_URL]])
        }
    }
    
  } //stages
  post {
    always {
      emailext body: 'A Test EMail', 
               recipientProviders: [[$class: 'DevelopersRecipientProvider'], 
                                   [$class: 'RequesterRecipientProvider'],
                                   nicholas.wagner@revature.net], 
               subject: 'Test'
    }
  }
}
